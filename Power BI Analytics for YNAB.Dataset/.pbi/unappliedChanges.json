{
  "version": "1.0",
  "conceptualSchemaSettings": {},
  "queries": [
    {
      "name": "Budget Id",
      "lineageTag": "4b69acb7-0568-4983-8b4d-b97acd897de1",
      "queryGroupId": "c0abc752-9b78-4a7c-a13d-f461180dceba",
      "navigationStepName": "Navigation",
      "text": [
        "\"abcde\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=false]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "API Token",
      "lineageTag": "d1881a8d-c688-483a-be0d-a813b846961e",
      "description": "YNAB API Token",
      "queryGroupId": "c0abc752-9b78-4a7c-a13d-f461180dceba",
      "navigationStepName": "Navigation",
      "text": [
        "\"abcde\" meta [IsParameterQuery=true, Type=\"Text\", IsParameterQueryRequired=true]"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Text",
      "isHidden": false
    },
    {
      "name": "YnabApi",
      "lineageTag": "e9521cbf-c157-4285-96de-a4d5d9db264c",
      "queryGroupId": "c0abc752-9b78-4a7c-a13d-f461180dceba",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    url = \"https://api.ynab.com/\",",
        "    #\"Budget Id\" = if #\"Budget Id\" = null then \"last-used\" else #\"Budget Id\",",
        "    Headers = [Authorization = \"Bearer \" & #\"API Token\"],",
        "    Response = Web.Contents(#\"url\", [RelativePath = \"v1/budgets/\" & #\"Budget Id\", Headers = Headers]),",
        "    Buffer = Binary.Buffer(Response),",
        "    #\"Parse JSON\" = Json.Document(Buffer),",
        "    data1 = #\"Parse JSON\"[data],",
        "    budget = data1[budget]",
        "in",
        "    budget"
      ],
      "loadAsTableDisabled": true,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Transactions Import",
      "lineageTag": "19bb3c2e-51d1-4f1b-82eb-276797bb0ff6",
      "queryGroupId": "2f2a5c66-60b6-4f74-a401-536832a54695",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[transactions],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"date\", \"amount\", \"memo\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\", \"deleted\"}, {\"id\", \"date\", \"amount\", \"memo\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"date\", type date}, {\"amount\", Currency.Type}, {\"memo\", type text}, {\"cleared\", type text}, {\"approved\", type logical}, {\"flag_color\", type text}, {\"account_id\", type text}, {\"payee_id\", type text}, {\"category_id\", type text}, {\"transfer_account_id\", type text}, {\"transfer_transaction_id\", type text}, {\"matched_transaction_id\", type text}, {\"import_id\", type text}, {\"import_payee_name\", type text}, {\"import_payee_name_original\", type text}, {\"debt_transaction_type\", type text}, {\"deleted\", type logical}}),",
        "    #\"Transform Amount\" = Table.TransformColumns(#\"Changed Type\",{{\"amount\", each _ / 1000, Currency.Type}})",
        "in",
        "    #\"Transform Amount\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Subtransactions Import",
      "lineageTag": "600efd9b-f9e9-46a1-801e-f9cf9978dc3c",
      "queryGroupId": "2f2a5c66-60b6-4f74-a401-536832a54695",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    subtransactions = Source[subtransactions],",
        "    #\"Converted to Table\" = Table.FromList(subtransactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"transaction_id\", \"amount\", \"memo\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"deleted\"}, {\"id\", \"transaction_id\", \"amount\", \"memo\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"transaction_id\", type text}, {\"amount\", Currency.Type}, {\"memo\", type text}, {\"category_id\", type text}, {\"transfer_account_id\", type text}, {\"deleted\", type logical}, {\"payee_id\", type text}}),",
        "    #\"Transform Amount\" = Table.TransformColumns(#\"Changed Type\",{{\"amount\", each _ / 1000, Currency.Type}}),",
        "    Buffer = Table.Buffer(#\"Transform Amount\"),",
        "    #\"Created Empty Table\" = try Buffer otherwise #table( type table [id= text, transaction_id = text, amount = Currency.Type, memo = text, payee_id = text, category_id = text, transfer_account_id = text, deleted = text], {})",
        "in",
        "    #\"Created Empty Table\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Transformed Subtransactions",
      "lineageTag": "4c2926ca-71bb-404f-96f4-08c96fd3e607",
      "queryGroupId": "2f2a5c66-60b6-4f74-a401-536832a54695",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"Subtransactions Import\",",
        "    #\"Merged Queries\" = Table.NestedJoin(Source, {\"transaction_id\"}, #\"Transactions Import\", {\"id\"}, \"Transactions\", JoinKind.LeftOuter),",
        "    #\"Expanded Transactions\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Transactions\", {\"date\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\"}, {\"date\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id.1\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Expanded Transactions\", \"payee temp\", each if [payee_id] = null then [payee_id.1] else [payee_id], type text),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Custom\",{\"payee_id\", \"payee_id.1\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"payee temp\", \"payee_id\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Accounts",
      "lineageTag": "18ad0cc9-77d0-4fd4-a161-595bd5355bb8",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[accounts],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column2\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"name\", \"type\", \"on_budget\", \"closed\", \"note\", \"balance\", \"cleared_balance\", \"uncleared_balance\", \"transfer_payee_id\", \"direct_import_linked\", \"direct_import_in_error\", \"last_reconciled_at\", \"debt_original_balance\", \"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\", \"deleted\"}, {\"id\", \"name\", \"type\", \"on_budget\", \"closed\", \"note\", \"balance\", \"cleared_balance\", \"uncleared_balance\", \"transfer_payee_id\", \"direct_import_linked\", \"direct_import_in_error\", \"last_reconciled_at\", \"debt_original_balance\", \"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\", \"deleted\"}),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Expanded Column2\",{\"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Removed Columns1\",{{\"id\", type text}, {\"name\", type text}, {\"type\", type text}, {\"on_budget\", type logical}, {\"closed\", type logical}, {\"note\", type text}, {\"balance\", Currency.Type}, {\"cleared_balance\", Currency.Type}, {\"uncleared_balance\", Currency.Type}, {\"transfer_payee_id\", type text}, {\"direct_import_linked\", type logical}, {\"direct_import_in_error\", type logical}, {\"last_reconciled_at\", type datetime}, {\"debt_original_balance\", Currency.Type}, {\"deleted\", type logical}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"name\", \"Name\"}, {\"type\", \"Type\"}}),",
        "    #\"Calculated Absolute Value\" = Table.TransformColumns(#\"Renamed Columns\",{{\"balance\", each _ / 1000, Currency.Type}, {\"cleared_balance\", each _ / 1000, Currency.Type}, {\"uncleared_balance\", each _ / 1000, Currency.Type}, {\"debt_original_balance\", each _ / 1000, Currency.Type}}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Calculated Absolute Value\",{{\"Name\", \"Account Name\"}, {\"Type\", \"account_type_id\"}, {\"on_budget\", \"Account Is On Budget\"}, {\"closed\", \"Account Is Closed\"}, {\"note\", \"Account Note\"}, {\"deleted\", \"Account Is Deleted\"}}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Renamed Columns1\", {\"account_type_id\"}, #\"Account Types\", {\"account_type_id\"}, \"Account Types\", JoinKind.LeftOuter),",
        "    #\"Expanded Account Types\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Account Types\", {\"Account Type\", \"Account Group\", \"Account Type Sort\", \"Account Group Sort\"}, {\"Account Type\", \"Account Group\", \"Account Type Sort\", \"Account Group Sort\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Expanded Account Types\", \"Account Tracking Type\", each if [Account Is On Budget] = true then \"Budget\" else \"Tracking\", type text)",
        "in",
        "    #\"Added Custom\"",
        "",
        "",
        "    /*let",
        "    Source = YnabApi,",
        "    transactions = Source[accounts],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"name\", \"type\", \"on_budget\", \"closed\", \"note\", \"balance\", \"cleared_balance\", \"uncleared_balance\", \"transfer_payee_id\", \"direct_import_linked\", \"direct_import_in_error\", \"last_reconciled_at\", \"debt_original_balance\", \"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\", \"deleted\", \"date\", \"amount\", \"memo\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\"}, {\"id\", \"name\", \"type\", \"on_budget\", \"closed\", \"note\", \"balance\", \"cleared_balance\", \"uncleared_balance\", \"transfer_payee_id\", \"direct_import_linked\", \"direct_import_in_error\", \"last_reconciled_at\", \"debt_original_balance\", \"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\", \"deleted\", \"date\", \"amount\", \"memo\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"name\", type text}, {\"type\", type text}, {\"on_budget\", type logical}, {\"closed\", type logical}, {\"note\", type text}, {\"balance\", Currency.Type}, {\"cleared_balance\", Currency.Type}, {\"uncleared_balance\", Currency.Type}, {\"transfer_payee_id\", type text}, {\"direct_import_linked\", type logical}, {\"direct_import_in_error\", type logical}, {\"last_reconciled_at\", type datetime}, {\"debt_original_balance\", type any}, {\"debt_interest_rates\", type any}, {\"debt_minimum_payments\", type any}, {\"debt_escrow_amounts\", type any}, {\"deleted\", type logical}, {\"date\", type any}, {\"amount\", type any}, {\"memo\", type any}, {\"cleared\", type any}, {\"approved\", type any}, {\"flag_color\", type any}, {\"account_id\", type any}, {\"payee_id\", type any}, {\"category_id\", type any}, {\"transfer_account_id\", type any}, {\"transfer_transaction_id\", type any}, {\"matched_transaction_id\", type any}, {\"import_id\", type any}, {\"import_payee_name\", type any}, {\"import_payee_name_original\", type any}, {\"debt_transaction_type\", type any}}),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Changed Type\",{\"debt_interest_rates\", \"debt_minimum_payments\", \"debt_escrow_amounts\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns\",{{\"name\", \"Name\"}, {\"type\", \"Type\"}}),",
        "    #\"Calculated Absolute Value\" = Table.TransformColumns(#\"Renamed Columns\",{{\"balance\", each _ / 1000, Currency.Type}, {\"cleared_balance\", each _ / 1000, Currency.Type}, {\"uncleared_balance\", each _ / 1000, Currency.Type}})",
        "in",
        "    #\"Calculated Absolute Value\"",
        "",
        "    */"
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = YnabApi,\\n    transactions = Source[accounts],\\n    #\\\"Converted to Table\\\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Expanded Column2\\\" = Table.ExpandRecordColumn(#\\\"Converted to Table\\\", \\\"Column1\\\", {\\\"id\\\", \\\"name\\\", \\\"type\\\", \\\"on_budget\\\", \\\"closed\\\", \\\"note\\\", \\\"balance\\\", \\\"cleared_balance\\\", \\\"uncleared_balance\\\", \\\"transfer_payee_id\\\", \\\"direct_import_linked\\\", \\\"direct_import_in_error\\\", \\\"last_reconciled_at\\\", \\\"debt_original_balance\\\", \\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\", \\\"deleted\\\"}, {\\\"id\\\", \\\"name\\\", \\\"type\\\", \\\"on_budget\\\", \\\"closed\\\", \\\"note\\\", \\\"balance\\\", \\\"cleared_balance\\\", \\\"uncleared_balance\\\", \\\"transfer_payee_id\\\", \\\"direct_import_linked\\\", \\\"direct_import_in_error\\\", \\\"last_reconciled_at\\\", \\\"debt_original_balance\\\", \\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\", \\\"deleted\\\"}),\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Expanded Column2\\\",{\\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Removed Columns1\\\",{{\\\"id\\\", type text}, {\\\"name\\\", type text}, {\\\"type\\\", type text}, {\\\"on_budget\\\", type logical}, {\\\"closed\\\", type logical}, {\\\"note\\\", type text}, {\\\"balance\\\", Currency.Type}, {\\\"cleared_balance\\\", Currency.Type}, {\\\"uncleared_balance\\\", Currency.Type}, {\\\"transfer_payee_id\\\", type text}, {\\\"direct_import_linked\\\", type logical}, {\\\"direct_import_in_error\\\", type logical}, {\\\"last_reconciled_at\\\", type datetime}, {\\\"debt_original_balance\\\", Currency.Type}, {\\\"deleted\\\", type logical}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"name\\\", \\\"Name\\\"}, {\\\"type\\\", \\\"Type\\\"}}),\\n    #\\\"Calculated Absolute Value\\\" = Table.TransformColumns(#\\\"Renamed Columns\\\",{{\\\"balance\\\", each _ / 1000, Currency.Type}, {\\\"cleared_balance\\\", each _ / 1000, Currency.Type}, {\\\"uncleared_balance\\\", each _ / 1000, Currency.Type}, {\\\"debt_original_balance\\\", each _ / 1000, Currency.Type}}),\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Calculated Absolute Value\\\",{{\\\"Name\\\", \\\"Account Name\\\"}, {\\\"Type\\\", \\\"account_type_id\\\"}, {\\\"on_budget\\\", \\\"Account Is On Budget\\\"}, {\\\"closed\\\", \\\"Account Is Closed\\\"}, {\\\"note\\\", \\\"Account Note\\\"}, {\\\"deleted\\\", \\\"Account Is Deleted\\\"}}),\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Renamed Columns1\\\", {\\\"account_type_id\\\"}, #\\\"Account Types\\\", {\\\"account_type_id\\\"}, \\\"Account Types\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Account Types\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"Account Types\\\", {\\\"Account Type\\\", \\\"Account Group\\\", \\\"Account Type Sort\\\", \\\"Account Group Sort\\\"}, {\\\"Account Type\\\", \\\"Account Group\\\", \\\"Account Type Sort\\\", \\\"Account Group Sort\\\"}),\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Expanded Account Types\\\", \\\"Account Tracking Type\\\", each if [Account Is On Budget] = true then \\\"Budget\\\" else \\\"Tracking\\\", type text)\\nin\\n    #\\\"Added Custom\\\"\\n\\n\\n    /*let\\n    Source = YnabApi,\\n    transactions = Source[accounts],\\n    #\\\"Converted to Table\\\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Expanded Column1\\\" = Table.ExpandRecordColumn(#\\\"Converted to Table\\\", \\\"Column1\\\", {\\\"id\\\", \\\"name\\\", \\\"type\\\", \\\"on_budget\\\", \\\"closed\\\", \\\"note\\\", \\\"balance\\\", \\\"cleared_balance\\\", \\\"uncleared_balance\\\", \\\"transfer_payee_id\\\", \\\"direct_import_linked\\\", \\\"direct_import_in_error\\\", \\\"last_reconciled_at\\\", \\\"debt_original_balance\\\", \\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\", \\\"deleted\\\", \\\"date\\\", \\\"amount\\\", \\\"memo\\\", \\\"cleared\\\", \\\"approved\\\", \\\"flag_color\\\", \\\"account_id\\\", \\\"payee_id\\\", \\\"category_id\\\", \\\"transfer_account_id\\\", \\\"transfer_transaction_id\\\", \\\"matched_transaction_id\\\", \\\"import_id\\\", \\\"import_payee_name\\\", \\\"import_payee_name_original\\\", \\\"debt_transaction_type\\\"}, {\\\"id\\\", \\\"name\\\", \\\"type\\\", \\\"on_budget\\\", \\\"closed\\\", \\\"note\\\", \\\"balance\\\", \\\"cleared_balance\\\", \\\"uncleared_balance\\\", \\\"transfer_payee_id\\\", \\\"direct_import_linked\\\", \\\"direct_import_in_error\\\", \\\"last_reconciled_at\\\", \\\"debt_original_balance\\\", \\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\", \\\"deleted\\\", \\\"date\\\", \\\"amount\\\", \\\"memo\\\", \\\"cleared\\\", \\\"approved\\\", \\\"flag_color\\\", \\\"account_id\\\", \\\"payee_id\\\", \\\"category_id\\\", \\\"transfer_account_id\\\", \\\"transfer_transaction_id\\\", \\\"matched_transaction_id\\\", \\\"import_id\\\", \\\"import_payee_name\\\", \\\"import_payee_name_original\\\", \\\"debt_transaction_type\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded Column1\\\",{{\\\"id\\\", type text}, {\\\"name\\\", type text}, {\\\"type\\\", type text}, {\\\"on_budget\\\", type logical}, {\\\"closed\\\", type logical}, {\\\"note\\\", type text}, {\\\"balance\\\", Currency.Type}, {\\\"cleared_balance\\\", Currency.Type}, {\\\"uncleared_balance\\\", Currency.Type}, {\\\"transfer_payee_id\\\", type text}, {\\\"direct_import_linked\\\", type logical}, {\\\"direct_import_in_error\\\", type logical}, {\\\"last_reconciled_at\\\", type datetime}, {\\\"debt_original_balance\\\", type any}, {\\\"debt_interest_rates\\\", type any}, {\\\"debt_minimum_payments\\\", type any}, {\\\"debt_escrow_amounts\\\", type any}, {\\\"deleted\\\", type logical}, {\\\"date\\\", type any}, {\\\"amount\\\", type any}, {\\\"memo\\\", type any}, {\\\"cleared\\\", type any}, {\\\"approved\\\", type any}, {\\\"flag_color\\\", type any}, {\\\"account_id\\\", type any}, {\\\"payee_id\\\", type any}, {\\\"category_id\\\", type any}, {\\\"transfer_account_id\\\", type any}, {\\\"transfer_transaction_id\\\", type any}, {\\\"matched_transaction_id\\\", type any}, {\\\"import_id\\\", type any}, {\\\"import_payee_name\\\", type any}, {\\\"import_payee_name_original\\\", type any}, {\\\"debt_transaction_type\\\", type any}}),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Changed Type\\\",{\\\"debt_interest_rates\\\", \\\"debt_minimum_payments\\\", \\\"debt_escrow_amounts\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns\\\",{{\\\"name\\\", \\\"Name\\\"}, {\\\"type\\\", \\\"Type\\\"}}),\\n    #\\\"Calculated Absolute Value\\\" = Table.TransformColumns(#\\\"Renamed Columns\\\",{{\\\"balance\\\", each _ / 1000, Currency.Type}, {\\\"cleared_balance\\\", each _ / 1000, Currency.Type}, {\\\"uncleared_balance\\\", each _ / 1000, Currency.Type}})\\nin\\n    #\\\"Calculated Absolute Value\\\"\\n\\n    */\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Exception",
      "isHidden": false
    },
    {
      "name": "Payees",
      "lineageTag": "48cf7125-f459-4e0f-8f4c-27e596a2baac",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[payees],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column2\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"name\", \"transfer_account_id\", \"deleted\"}, {\"id\", \"name\", \"transfer_account_id\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column2\",{{\"id\", type text}, {\"name\", type text}, {\"transfer_account_id\", type text}, {\"deleted\", type logical}}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Changed Type\",{{\"name\", \"Payee name\"}, {\"deleted\", \"Payee Is Deleted\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = YnabApi,\\n    transactions = Source[payees],\\n    #\\\"Converted to Table\\\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Expanded Column2\\\" = Table.ExpandRecordColumn(#\\\"Converted to Table\\\", \\\"Column1\\\", {\\\"id\\\", \\\"name\\\", \\\"transfer_account_id\\\", \\\"deleted\\\"}, {\\\"id\\\", \\\"name\\\", \\\"transfer_account_id\\\", \\\"deleted\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded Column2\\\",{{\\\"id\\\", type text}, {\\\"name\\\", type text}, {\\\"transfer_account_id\\\", type text}, {\\\"deleted\\\", type logical}}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Changed Type\\\",{{\\\"name\\\", \\\"Payee name\\\"}, {\\\"deleted\\\", \\\"Payee Is Deleted\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Categories",
      "lineageTag": "5ff42771-9463-4678-b25a-47b876cc1234",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[categories],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"category_group_id\", \"name\", \"hidden\", \"original_category_group_id\", \"note\", \"budgeted\", \"activity\", \"balance\", \"goal_type\", \"goal_day\", \"goal_cadence\", \"goal_cadence_frequency\", \"goal_creation_month\", \"goal_target\", \"goal_target_month\", \"goal_percentage_complete\", \"goal_months_to_budget\", \"goal_under_funded\", \"goal_overall_funded\", \"goal_overall_left\", \"deleted\"}, {\"id\", \"category_group_id\", \"name\", \"hidden\", \"original_category_group_id\", \"note\", \"budgeted\", \"activity\", \"balance\", \"goal_type\", \"goal_day\", \"goal_cadence\", \"goal_cadence_frequency\", \"goal_creation_month\", \"goal_target\", \"goal_target_month\", \"goal_percentage_complete\", \"goal_months_to_budget\", \"goal_under_funded\", \"goal_overall_funded\", \"goal_overall_left\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"category_group_id\", type text}, {\"name\", type text}, {\"hidden\", type logical}, {\"original_category_group_id\", type any}, {\"note\", type text}, {\"budgeted\", Int64.Type}, {\"activity\", Int64.Type}, {\"balance\", Int64.Type}, {\"goal_type\", type text}, {\"goal_day\", type any}, {\"goal_cadence\", Int64.Type}, {\"goal_cadence_frequency\", type any}, {\"goal_creation_month\", type date}, {\"goal_target\", Int64.Type}, {\"goal_target_month\", type any}, {\"goal_percentage_complete\", Int64.Type}, {\"goal_months_to_budget\", Int64.Type}, {\"goal_under_funded\", Int64.Type}, {\"goal_overall_funded\", Int64.Type}, {\"goal_overall_left\", Int64.Type}, {\"deleted\", type logical}}),",
        "    #\"Appended Query\" = Table.Combine({#\"Changed Type\", #\"Custom Categories\"}),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Appended Query\", {\"category_group_id\"}, #\"Category Groups\", {\"id\"}, \"Category Groups\", JoinKind.LeftOuter),",
        "    #\"Expanded Category Groups\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Category Groups\", {\"id\", \"name\", \"hidden\", \"deleted\", \"Category Type\", \"Category Group Name Sort\", \"Category Type Sort\"}, {\"Category Groups.id\", \"Category Groups.name\", \"Category Groups.hidden\", \"Category Groups.deleted\", \"Category Groups.Category Type\", \"Category Groups.Category Group Name Sort\", \"Category Groups.Category Type Sort\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Expanded Category Groups\",{{\"name\", \"Category Name\"}, {\"hidden\", \"Category Is Hidden\"}, {\"note\", \"Category Note\"}, {\"deleted\", \"Category Is Deleted\"}, {\"Category Groups.name\", \"Category Group Name\"}, {\"Category Groups.hidden\", \"Category Group Is Hidden\"}, {\"Category Groups.deleted\", \"Category Group Is Deleted\"}, {\"Category Groups.Category Type\", \"Category Type\"}, {\"Category Groups.Category Type Sort\", \"Category Type Sort\"}, {\"Category Groups.Category Group Name Sort\", \"Category Group Name Sort\"}})",
        "in",
        "    #\"Renamed Columns\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = YnabApi,\\n    transactions = Source[categories],\\n    #\\\"Converted to Table\\\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Expanded Column1\\\" = Table.ExpandRecordColumn(#\\\"Converted to Table\\\", \\\"Column1\\\", {\\\"id\\\", \\\"category_group_id\\\", \\\"name\\\", \\\"hidden\\\", \\\"original_category_group_id\\\", \\\"note\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"balance\\\", \\\"goal_type\\\", \\\"goal_day\\\", \\\"goal_cadence\\\", \\\"goal_cadence_frequency\\\", \\\"goal_creation_month\\\", \\\"goal_target\\\", \\\"goal_target_month\\\", \\\"goal_percentage_complete\\\", \\\"goal_months_to_budget\\\", \\\"goal_under_funded\\\", \\\"goal_overall_funded\\\", \\\"goal_overall_left\\\", \\\"deleted\\\"}, {\\\"id\\\", \\\"category_group_id\\\", \\\"name\\\", \\\"hidden\\\", \\\"original_category_group_id\\\", \\\"note\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"balance\\\", \\\"goal_type\\\", \\\"goal_day\\\", \\\"goal_cadence\\\", \\\"goal_cadence_frequency\\\", \\\"goal_creation_month\\\", \\\"goal_target\\\", \\\"goal_target_month\\\", \\\"goal_percentage_complete\\\", \\\"goal_months_to_budget\\\", \\\"goal_under_funded\\\", \\\"goal_overall_funded\\\", \\\"goal_overall_left\\\", \\\"deleted\\\"}),\\n    #\\\"Changed Type\\\" = Table.TransformColumnTypes(#\\\"Expanded Column1\\\",{{\\\"id\\\", type text}, {\\\"category_group_id\\\", type text}, {\\\"name\\\", type text}, {\\\"hidden\\\", type logical}, {\\\"original_category_group_id\\\", type any}, {\\\"note\\\", type text}, {\\\"budgeted\\\", Int64.Type}, {\\\"activity\\\", Int64.Type}, {\\\"balance\\\", Int64.Type}, {\\\"goal_type\\\", type text}, {\\\"goal_day\\\", type any}, {\\\"goal_cadence\\\", Int64.Type}, {\\\"goal_cadence_frequency\\\", type any}, {\\\"goal_creation_month\\\", type date}, {\\\"goal_target\\\", Int64.Type}, {\\\"goal_target_month\\\", type any}, {\\\"goal_percentage_complete\\\", Int64.Type}, {\\\"goal_months_to_budget\\\", Int64.Type}, {\\\"goal_under_funded\\\", Int64.Type}, {\\\"goal_overall_funded\\\", Int64.Type}, {\\\"goal_overall_left\\\", Int64.Type}, {\\\"deleted\\\", type logical}}),\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Changed Type\\\", #\\\"Custom Categories\\\"}),\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Appended Query\\\", {\\\"category_group_id\\\"}, #\\\"Category Groups\\\", {\\\"id\\\"}, \\\"Category Groups\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Category Groups\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"Category Groups\\\", {\\\"id\\\", \\\"name\\\", \\\"hidden\\\", \\\"deleted\\\", \\\"Category Type\\\", \\\"Category Group Name Sort\\\", \\\"Category Type Sort\\\"}, {\\\"Category Groups.id\\\", \\\"Category Groups.name\\\", \\\"Category Groups.hidden\\\", \\\"Category Groups.deleted\\\", \\\"Category Groups.Category Type\\\", \\\"Category Groups.Category Group Name Sort\\\", \\\"Category Groups.Category Type Sort\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Expanded Category Groups\\\",{{\\\"name\\\", \\\"Category Name\\\"}, {\\\"hidden\\\", \\\"Category Is Hidden\\\"}, {\\\"note\\\", \\\"Category Note\\\"}, {\\\"deleted\\\", \\\"Category Is Deleted\\\"}, {\\\"Category Groups.name\\\", \\\"Category Group Name\\\"}, {\\\"Category Groups.hidden\\\", \\\"Category Group Is Hidden\\\"}, {\\\"Category Groups.deleted\\\", \\\"Category Group Is Deleted\\\"}, {\\\"Category Groups.Category Type\\\", \\\"Category Type\\\"}, {\\\"Category Groups.Category Type Sort\\\", \\\"Category Type Sort\\\"}, {\\\"Category Groups.Category Group Name Sort\\\", \\\"Category Group Name Sort\\\"}})\\nin\\n    #\\\"Renamed Columns\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Transactions",
      "lineageTag": "d878308e-c735-415b-ad6d-439fcf91f60a",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = #\"Transactions Import\",",
        "    #\"Merged Queries\" = Table.NestedJoin(Source, {\"id\"}, #\"Transformed Subtransactions\", {\"transaction_id\"}, \"Subtransactions\", JoinKind.LeftAnti),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Merged Queries\",{\"Subtransactions\"}),",
        "    #\"Appended Query\" = Table.Combine({#\"Removed Columns\", #\"Transformed Subtransactions\"}),",
        "    #\"Merged Queries1\" = Table.NestedJoin(#\"Appended Query\", {\"account_id\"}, Accounts, {\"id\"}, \"Accounts\", JoinKind.LeftOuter),",
        "    #\"Expanded Accounts\" = Table.ExpandTableColumn(#\"Merged Queries1\", \"Accounts\", {\"Account Is On Budget\"}, {\"Accounts.on_budget\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Expanded Accounts\", \"Category temp\", each if [Accounts.on_budget] = false then \"cat2\" else if ([transfer_account_id] <> null and [category_id] = null) then \"cat1\" else if [category_id] = null then \"cat3\" else [category_id], type text),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Added Custom\",{\"category_id\", \"Accounts.on_budget\", \"transaction_id\"}),",
        "    #\"Renamed Columns\" = Table.RenameColumns(#\"Removed Columns1\",{{\"Category temp\", \"category_id\"}}),",
        "    #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns\",{\"id\", \"date\", \"amount\", \"memo\", \"cleared\", \"approved\", \"flag_color\", \"account_id\", \"payee_id\", \"category_id\", \"transfer_account_id\", \"transfer_transaction_id\", \"matched_transaction_id\", \"import_id\", \"import_payee_name\", \"import_payee_name_original\", \"debt_transaction_type\", \"deleted\"}),",
        "    #\"Renamed Columns1\" = Table.RenameColumns(#\"Reordered Columns\",{{\"memo\", \"Transaction Memo\"}, {\"cleared\", \"Transaction Cleared Status\"}, {\"approved\", \"Transaction Is Approved\"}, {\"flag_color\", \"Transaction Flag Color\"}, {\"deleted\", \"Transaction Is Deleted\"}}),",
        "    #\"Added Custom1\" = Table.AddColumn(#\"Renamed Columns1\", \"Absolute Amount\", each Number.Abs([amount]), Currency.Type)",
        "in",
        "    #\"Added Custom1\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = #\\\"Transactions Import\\\",\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(Source, {\\\"id\\\"}, #\\\"Transformed Subtransactions\\\", {\\\"transaction_id\\\"}, \\\"Subtransactions\\\", JoinKind.LeftAnti),\\n    #\\\"Removed Columns\\\" = Table.RemoveColumns(#\\\"Merged Queries\\\",{\\\"Subtransactions\\\"}),\\n    #\\\"Appended Query\\\" = Table.Combine({#\\\"Removed Columns\\\", #\\\"Transformed Subtransactions\\\"}),\\n    #\\\"Merged Queries1\\\" = Table.NestedJoin(#\\\"Appended Query\\\", {\\\"account_id\\\"}, Accounts, {\\\"id\\\"}, \\\"Accounts\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Accounts\\\" = Table.ExpandTableColumn(#\\\"Merged Queries1\\\", \\\"Accounts\\\", {\\\"Account Is On Budget\\\"}, {\\\"Accounts.on_budget\\\"}),\\n    #\\\"Added Custom\\\" = Table.AddColumn(#\\\"Expanded Accounts\\\", \\\"Category temp\\\", each if [Accounts.on_budget] = false then \\\"cat2\\\" else if ([transfer_account_id] <> null and [category_id] = null) then \\\"cat1\\\" else if [category_id] = null then \\\"cat3\\\" else [category_id], type text),\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Added Custom\\\",{\\\"category_id\\\", \\\"Accounts.on_budget\\\", \\\"transaction_id\\\"}),\\n    #\\\"Renamed Columns\\\" = Table.RenameColumns(#\\\"Removed Columns1\\\",{{\\\"Category temp\\\", \\\"category_id\\\"}}),\\n    #\\\"Reordered Columns\\\" = Table.ReorderColumns(#\\\"Renamed Columns\\\",{\\\"id\\\", \\\"date\\\", \\\"amount\\\", \\\"memo\\\", \\\"cleared\\\", \\\"approved\\\", \\\"flag_color\\\", \\\"account_id\\\", \\\"payee_id\\\", \\\"category_id\\\", \\\"transfer_account_id\\\", \\\"transfer_transaction_id\\\", \\\"matched_transaction_id\\\", \\\"import_id\\\", \\\"import_payee_name\\\", \\\"import_payee_name_original\\\", \\\"debt_transaction_type\\\", \\\"deleted\\\"}),\\n    #\\\"Renamed Columns1\\\" = Table.RenameColumns(#\\\"Reordered Columns\\\",{{\\\"memo\\\", \\\"Transaction Memo\\\"}, {\\\"cleared\\\", \\\"Transaction Cleared Status\\\"}, {\\\"approved\\\", \\\"Transaction Is Approved\\\"}, {\\\"flag_color\\\", \\\"Transaction Flag Color\\\"}, {\\\"deleted\\\", \\\"Transaction Is Deleted\\\"}}),\\n    #\\\"Added Custom1\\\" = Table.AddColumn(#\\\"Renamed Columns1\\\", \\\"Absolute Amount\\\", each Number.Abs([amount]), Currency.Type)\\nin\\n    #\\\"Added Custom1\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Budgets",
      "lineageTag": "0447ef43-8a0e-4cc0-9979-8ad4fdae40ba",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[months],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"month\", \"note\", \"income\", \"budgeted\", \"activity\", \"to_be_budgeted\", \"age_of_money\", \"deleted\", \"categories\"}, {\"month\", \"note\", \"income\", \"budgeted\", \"activity\", \"to_be_budgeted\", \"age_of_money\", \"deleted\", \"categories\"}),",
        "    #\"Removed Columns1\" = Table.RemoveColumns(#\"Expanded Column1\",{\"note\", \"income\", \"budgeted\", \"activity\", \"to_be_budgeted\", \"age_of_money\", \"deleted\"}),",
        "    #\"Expanded categories\" = Table.ExpandListColumn(#\"Removed Columns1\", \"categories\"),",
        "    #\"Expanded categories1\" = Table.ExpandRecordColumn(#\"Expanded categories\", \"categories\", {\"id\", \"category_group_id\", \"name\", \"hidden\", \"original_category_group_id\", \"note\", \"budgeted\", \"activity\", \"balance\", \"goal_type\", \"goal_day\", \"goal_cadence\", \"goal_cadence_frequency\", \"goal_creation_month\", \"goal_target\", \"goal_target_month\", \"goal_percentage_complete\", \"goal_months_to_budget\", \"goal_under_funded\", \"goal_overall_funded\", \"goal_overall_left\", \"deleted\"}, {\"id\", \"category_group_id\", \"name\", \"hidden\", \"original_category_group_id\", \"note\", \"budgeted\", \"activity\", \"balance\", \"goal_type\", \"goal_day\", \"goal_cadence\", \"goal_cadence_frequency\", \"goal_creation_month\", \"goal_target\", \"goal_target_month\", \"goal_percentage_complete\", \"goal_months_to_budget\", \"goal_under_funded\", \"goal_overall_funded\", \"goal_overall_left\", \"deleted\"}),",
        "    #\"Changed Type1\" = Table.TransformColumnTypes(#\"Expanded categories1\",{{\"month\", type date}, {\"id\", type text}, {\"category_group_id\", type text}, {\"name\", type text}, {\"hidden\", type logical}, {\"original_category_group_id\", type any}, {\"note\", type text}, {\"budgeted\", Currency.Type}, {\"activity\", Currency.Type}, {\"balance\", Currency.Type}, {\"goal_type\", type text}, {\"goal_day\", type any}, {\"goal_cadence\", Int64.Type}, {\"goal_cadence_frequency\", type any}, {\"goal_creation_month\", type date}, {\"goal_target\", Int64.Type}, {\"goal_target_month\", type any}, {\"goal_percentage_complete\", Int64.Type}, {\"goal_months_to_budget\", Int64.Type}, {\"goal_under_funded\", Int64.Type}, {\"goal_overall_funded\", Int64.Type}, {\"goal_overall_left\", Int64.Type}, {\"deleted\", type logical}}),",
        "    #\"Transform Amounts\" = Table.TransformColumns(#\"Changed Type1\",{{\"budgeted\", each _ / 1000, Currency.Type}, {\"activity\", each _ / 1000, Currency.Type}, {\"balance\", each _ / 1000, Currency.Type}})",
        "in",
        "    #\"Transform Amounts\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"let\\n    Source = YnabApi,\\n    transactions = Source[months],\\n    #\\\"Converted to Table\\\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\\n    #\\\"Expanded Column1\\\" = Table.ExpandRecordColumn(#\\\"Converted to Table\\\", \\\"Column1\\\", {\\\"month\\\", \\\"note\\\", \\\"income\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"to_be_budgeted\\\", \\\"age_of_money\\\", \\\"deleted\\\", \\\"categories\\\"}, {\\\"month\\\", \\\"note\\\", \\\"income\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"to_be_budgeted\\\", \\\"age_of_money\\\", \\\"deleted\\\", \\\"categories\\\"}),\\n    #\\\"Removed Columns1\\\" = Table.RemoveColumns(#\\\"Expanded Column1\\\",{\\\"note\\\", \\\"income\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"to_be_budgeted\\\", \\\"age_of_money\\\", \\\"deleted\\\"}),\\n    #\\\"Expanded categories\\\" = Table.ExpandListColumn(#\\\"Removed Columns1\\\", \\\"categories\\\"),\\n    #\\\"Expanded categories1\\\" = Table.ExpandRecordColumn(#\\\"Expanded categories\\\", \\\"categories\\\", {\\\"id\\\", \\\"category_group_id\\\", \\\"name\\\", \\\"hidden\\\", \\\"original_category_group_id\\\", \\\"note\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"balance\\\", \\\"goal_type\\\", \\\"goal_day\\\", \\\"goal_cadence\\\", \\\"goal_cadence_frequency\\\", \\\"goal_creation_month\\\", \\\"goal_target\\\", \\\"goal_target_month\\\", \\\"goal_percentage_complete\\\", \\\"goal_months_to_budget\\\", \\\"goal_under_funded\\\", \\\"goal_overall_funded\\\", \\\"goal_overall_left\\\", \\\"deleted\\\"}, {\\\"id\\\", \\\"category_group_id\\\", \\\"name\\\", \\\"hidden\\\", \\\"original_category_group_id\\\", \\\"note\\\", \\\"budgeted\\\", \\\"activity\\\", \\\"balance\\\", \\\"goal_type\\\", \\\"goal_day\\\", \\\"goal_cadence\\\", \\\"goal_cadence_frequency\\\", \\\"goal_creation_month\\\", \\\"goal_target\\\", \\\"goal_target_month\\\", \\\"goal_percentage_complete\\\", \\\"goal_months_to_budget\\\", \\\"goal_under_funded\\\", \\\"goal_overall_funded\\\", \\\"goal_overall_left\\\", \\\"deleted\\\"}),\\n    #\\\"Changed Type1\\\" = Table.TransformColumnTypes(#\\\"Expanded categories1\\\",{{\\\"month\\\", type date}, {\\\"id\\\", type text}, {\\\"category_group_id\\\", type text}, {\\\"name\\\", type text}, {\\\"hidden\\\", type logical}, {\\\"original_category_group_id\\\", type any}, {\\\"note\\\", type text}, {\\\"budgeted\\\", Currency.Type}, {\\\"activity\\\", Currency.Type}, {\\\"balance\\\", Currency.Type}, {\\\"goal_type\\\", type text}, {\\\"goal_day\\\", type any}, {\\\"goal_cadence\\\", Int64.Type}, {\\\"goal_cadence_frequency\\\", type any}, {\\\"goal_creation_month\\\", type date}, {\\\"goal_target\\\", Int64.Type}, {\\\"goal_target_month\\\", type any}, {\\\"goal_percentage_complete\\\", Int64.Type}, {\\\"goal_months_to_budget\\\", Int64.Type}, {\\\"goal_under_funded\\\", Int64.Type}, {\\\"goal_overall_funded\\\", Int64.Type}, {\\\"goal_overall_left\\\", Int64.Type}, {\\\"deleted\\\", type logical}}),\\n    #\\\"Transform Amounts\\\" = Table.TransformColumns(#\\\"Changed Type1\\\",{{\\\"budgeted\\\", each _ / 1000, Currency.Type}, {\\\"activity\\\", each _ / 1000, Currency.Type}, {\\\"balance\\\", each _ / 1000, Currency.Type}})\\nin\\n    #\\\"Transform Amounts\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Calendar",
      "lineageTag": "0ebb52e8-f106-4ea4-baa0-5cf0ca7aad70",
      "navigationStepName": "Navigation",
      "text": [
        "//Attribution: Calendar table has been copied and adapted from https://gorilla.bi/power-query/date-table/",
        "",
        "let",
        "    Today = Date.From( DateTime.LocalNow() ),",
        "    StartDate = Date.From(YnabApi[first_month]),",
        "    EndDate = Date.EndOfMonth(Date.From(YnabApi[last_month])),",
        "    #\"List of Dates\" = List.Dates( StartDate, Duration.Days( EndDate - StartDate ) +1, #duration( 1, 0, 0, 0 ) ),",
        "    #\"Converted to Table\" = Table.FromList( #\"List of Dates\", Splitter.SplitByNothing(), type table[Date = Date.Type] ),",
        "    #\"Insert Date Integer\" = Table.AddColumn(#\"Converted to Table\", \"Date Integer\", each Number.From( Date.ToText( [Date], \"yyyyMMdd\" ) ), Int64.Type ),",
        "    #\"Insert Year\" = Table.AddColumn(#\"Insert Date Integer\", \"Year\", each Date.Year([Date]), Int64.Type),",
        "    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the Current period.",
        "    #\"Add Year Default\" = Table.AddColumn(#\"Insert Year\", \"Year Default\", each if Date.Year( Today ) = [Year] then \"Current\" else Text.From( [Year] ), type text),",
        "    #\"Insert YYYY-MM\" = Table.AddColumn(#\"Add Year Default\", \"YYYY-MM\", each Date.ToText( [Date], \"yyyy-MM\"), type text),",
        "    #\"Insert Month-Year\" = Table.AddColumn(#\"Insert YYYY-MM\", \"Month-Year\", each Date.ToText( [Date], \"MMM yyyy\"), type text),",
        "    #\"Insert Month Number\" = Table.AddColumn(#\"Insert Month-Year\", \"Month Of Year\", each Date.Month([Date]), Int64.Type),",
        "    #\"Insert Month Name\" = Table.AddColumn(#\"Insert Month Number\", \"Month Name\", each Date.MonthName([Date], \"EN-us\"), type text),",
        "    #\"Insert Month Name Short\" = Table.AddColumn(#\"Insert Month Name\", \"Month Name Short\", each Date.ToText( [Date] , \"MMM\", \"EN-us\" ), type text),",
        "    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the current period.",
        "    #\"Add Month Name Default\" = Table.AddColumn(#\"Insert Month Name Short\", \"Month Name Default\", each if Date.Month( Today ) = [Month Of Year] then \"Current\" else [Month Name], type text ),",
        "    #\"Insert Start of Month\" = Table.AddColumn(#\"Add Month Name Default\", \"Start of Month\", each Date.StartOfMonth([Date]), type date),",
        "    #\"Inserted End of Month\" = Table.AddColumn(#\"Insert Start of Month\", \"End of Month\", each Date.EndOfMonth( [Date] ), type date),",
        "    #\"Inserted Days in Month\" = Table.AddColumn(#\"Inserted End of Month\", \"Days in Month\", each Date.DaysInMonth([Date]), Int64.Type),",
        "    #\"Add ISO Week\" = Table.AddColumn(#\"Inserted Days in Month\", \"ISO Weeknumber\", each let",
        "   CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),",
        "   YearCurrThursday = Date.Year( CurrentThursday ),",
        "   FirstThursdayOfYear = Date.AddDays(#date( YearCurrThursday,1,7),- Date.DayOfWeek(#date(YearCurrThursday,1,1), Day.Friday) ),",
        "   ISO_Week = Duration.Days( CurrentThursday - FirstThursdayOfYear) / 7 + 1",
        "in ISO_Week, Int64.Type ),",
        "    #\"Add ISO Year\" = Table.AddColumn(#\"Add ISO Week\", \"ISO Year\", each Date.Year(  Date.AddDays( [Date], 26 - [ISO Weeknumber] ) ), Int64.Type ),",
        "    #\"Insert Start of Week\" = Table.AddColumn(#\"Add ISO Year\", \"Start of Week\", each Date.StartOfWeek([Date], Day.Monday ), type date),",
        "    #\"Insert Quarter Number\" = Table.AddColumn(#\"Insert Start of Week\", \"Quarter Number\", each Date.QuarterOfYear([Date]), Int64.Type),",
        "    #\"Added Quarter\" = Table.AddColumn(#\"Insert Quarter Number\", \"Quarter\", each \"Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
        "    #\"Add Year-Quarter\" = Table.AddColumn(#\"Added Quarter\", \"Year-Quarter\", each Text.From( Date.Year([Date]) ) & \"-Q\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),",
        "    #\"Insert Day Name\" = Table.AddColumn(#\"Add Year-Quarter\", \"Day Name\", each Date.DayOfWeekName([Date], \"EN-us\" ), type text),",
        "    #\"Insert Day Name Short\" = Table.AddColumn( #\"Insert Day Name\", \"Day Name Short\", each Date.ToText( [Date], \"ddd\", \"EN-us\" ), type text),",
        "    #\"Insert Day of Month Number\" = Table.AddColumn(#\"Insert Day Name Short\", \"Day of Month Number\", each Date.Day([Date]), Int64.Type),",
        "    // Day.Monday indicates the week starts on Monday. Change this in case you want the week to start on a different date. ",
        "    #\"Insert Day of Week\" = Table.AddColumn(#\"Insert Day of Month Number\", \"Day of Week Number\", each Date.DayOfWeek( [Date], Day.Monday ), Int64.Type),",
        "    #\"Insert Day of Year\" = Table.AddColumn(#\"Insert Day of Week\", \"Day of Year Number\", each Date.DayOfYear( [Date] ), Int64.Type),",
        "    #\"Add Day Offset\" = Table.AddColumn(#\"Insert Day of Year\", \"Day Offset\", each Number.From( Date.From( Today ) - [Date] ) , Int64.Type ),",
        "    #\"Add Week Offset\" = Table.AddColumn(#\"Add Day Offset\", \"Week Offset\", each Duration.Days( Date.StartOfWeek( [Date], Day.Monday ) - Date.StartOfWeek( Today, Day.Monday ) ) / 7 , Int64.Type ),",
        "    #\"Add Month Offset\" = Table.AddColumn(#\"Add Week Offset\", \"Month Offset\", each ( [Year] - Date.Year( Today ) ) * 12 + ( [Month Of Year] - Date.Month( Today ) ), Int64.Type ),",
        "    #\"Add Quarter Offset\" = Table.AddColumn(#\"Add Month Offset\", \"Quarter Offset\", each ( [Year] - Date.Year(Today) ) * 4 + Date.QuarterOfYear( [Date] ) - Date.QuarterOfYear( Today ), Int64.Type ),",
        "    #\"Add Year Offset\" = Table.AddColumn(#\"Add Quarter Offset\", \"Year Offset\", each [Year] - Date.Year(Today), Int64.Type ),",
        "    #\"Insert Is Weekend\" = Table.AddColumn(#\"Add Year Offset\", \"Is Weekend\", each if Date.DayOfWeek( [Date] ) >= 5 then 1 else 0, Int64.Type ),",
        "    #\"Insert Is Weekday\" = Table.AddColumn(#\"Insert Is Weekend\", \"Is Weekday\", each if Date.DayOfWeek( [Date] ) < 5 then 1 else 0, Int64.Type ),",
        "    #\"Merged Queries\" = Table.NestedJoin(#\"Insert Is Weekday\", {\"Start of Month\"}, #\"Age of Money\", {\"month\"}, \"Age of Money\", JoinKind.LeftOuter),",
        "    #\"Expanded Age of Money\" = Table.ExpandTableColumn(#\"Merged Queries\", \"Age of Money\", {\"age_of_money\"}, {\"age_of_money\"})",
        "in",
        "    #\"Expanded Age of Money\""
      ],
      "isDirectQuery": false,
      "lastLoadedAsTableFormulaText": "{\"IncludesReferencedQueries\":false,\"RootFormulaText\":\"//Attribution: Calendar table has been copied and adapted from https://gorilla.bi/power-query/date-table/\\n\\nlet\\n    Today = Date.From( DateTime.LocalNow() ),\\n    StartDate = Date.From(YnabApi[first_month]),\\n    EndDate = Date.EndOfMonth(Date.From(YnabApi[last_month])),\\n    #\\\"List of Dates\\\" = List.Dates( StartDate, Duration.Days( EndDate - StartDate ) +1, #duration( 1, 0, 0, 0 ) ),\\n    #\\\"Converted to Table\\\" = Table.FromList( #\\\"List of Dates\\\", Splitter.SplitByNothing(), type table[Date = Date.Type] ),\\n    #\\\"Insert Date Integer\\\" = Table.AddColumn(#\\\"Converted to Table\\\", \\\"Date Integer\\\", each Number.From( Date.ToText( [Date], \\\"yyyyMMdd\\\" ) ), Int64.Type ),\\n    #\\\"Insert Year\\\" = Table.AddColumn(#\\\"Insert Date Integer\\\", \\\"Year\\\", each Date.Year([Date]), Int64.Type),\\n    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the Current period.\\n    #\\\"Add Year Default\\\" = Table.AddColumn(#\\\"Insert Year\\\", \\\"Year Default\\\", each if Date.Year( Today ) = [Year] then \\\"Current\\\" else Text.From( [Year] ), type text),\\n    #\\\"Insert YYYY-MM\\\" = Table.AddColumn(#\\\"Add Year Default\\\", \\\"YYYY-MM\\\", each Date.ToText( [Date], \\\"yyyy-MM\\\"), type text),\\n    #\\\"Insert Month-Year\\\" = Table.AddColumn(#\\\"Insert YYYY-MM\\\", \\\"Month-Year\\\", each Date.ToText( [Date], \\\"MMM yyyy\\\"), type text),\\n    #\\\"Insert Month Number\\\" = Table.AddColumn(#\\\"Insert Month-Year\\\", \\\"Month Of Year\\\", each Date.Month([Date]), Int64.Type),\\n    #\\\"Insert Month Name\\\" = Table.AddColumn(#\\\"Insert Month Number\\\", \\\"Month Name\\\", each Date.MonthName([Date], \\\"EN-us\\\"), type text),\\n    #\\\"Insert Month Name Short\\\" = Table.AddColumn(#\\\"Insert Month Name\\\", \\\"Month Name Short\\\", each Date.ToText( [Date] , \\\"MMM\\\", \\\"EN-us\\\" ), type text),\\n    // Creates a dynamic year value called 'Current' that moves with the current date. Put this value in a slicer and it automatically switches to the current period.\\n    #\\\"Add Month Name Default\\\" = Table.AddColumn(#\\\"Insert Month Name Short\\\", \\\"Month Name Default\\\", each if Date.Month( Today ) = [Month Of Year] then \\\"Current\\\" else [Month Name], type text ),\\n    #\\\"Insert Start of Month\\\" = Table.AddColumn(#\\\"Add Month Name Default\\\", \\\"Start of Month\\\", each Date.StartOfMonth([Date]), type date),\\n    #\\\"Inserted End of Month\\\" = Table.AddColumn(#\\\"Insert Start of Month\\\", \\\"End of Month\\\", each Date.EndOfMonth( [Date] ), type date),\\n    #\\\"Inserted Days in Month\\\" = Table.AddColumn(#\\\"Inserted End of Month\\\", \\\"Days in Month\\\", each Date.DaysInMonth([Date]), Int64.Type),\\n    #\\\"Add ISO Week\\\" = Table.AddColumn(#\\\"Inserted Days in Month\\\", \\\"ISO Weeknumber\\\", each let\\n   CurrentThursday = Date.AddDays([Date], 3 - Date.DayOfWeek([Date], Day.Monday ) ),\\n   YearCurrThursday = Date.Year( CurrentThursday ),\\n   FirstThursdayOfYear = Date.AddDays(#date( YearCurrThursday,1,7),- Date.DayOfWeek(#date(YearCurrThursday,1,1), Day.Friday) ),\\n   ISO_Week = Duration.Days( CurrentThursday - FirstThursdayOfYear) / 7 + 1\\nin ISO_Week, Int64.Type ),\\n    #\\\"Add ISO Year\\\" = Table.AddColumn(#\\\"Add ISO Week\\\", \\\"ISO Year\\\", each Date.Year(  Date.AddDays( [Date], 26 - [ISO Weeknumber] ) ), Int64.Type ),\\n    #\\\"Insert Start of Week\\\" = Table.AddColumn(#\\\"Add ISO Year\\\", \\\"Start of Week\\\", each Date.StartOfWeek([Date], Day.Monday ), type date),\\n    #\\\"Insert Quarter Number\\\" = Table.AddColumn(#\\\"Insert Start of Week\\\", \\\"Quarter Number\\\", each Date.QuarterOfYear([Date]), Int64.Type),\\n    #\\\"Added Quarter\\\" = Table.AddColumn(#\\\"Insert Quarter Number\\\", \\\"Quarter\\\", each \\\"Q\\\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),\\n    #\\\"Add Year-Quarter\\\" = Table.AddColumn(#\\\"Added Quarter\\\", \\\"Year-Quarter\\\", each Text.From( Date.Year([Date]) ) & \\\"-Q\\\" & Text.From( Date.QuarterOfYear([Date]) ), type text ),\\n    #\\\"Insert Day Name\\\" = Table.AddColumn(#\\\"Add Year-Quarter\\\", \\\"Day Name\\\", each Date.DayOfWeekName([Date], \\\"EN-us\\\" ), type text),\\n    #\\\"Insert Day Name Short\\\" = Table.AddColumn( #\\\"Insert Day Name\\\", \\\"Day Name Short\\\", each Date.ToText( [Date], \\\"ddd\\\", \\\"EN-us\\\" ), type text),\\n    #\\\"Insert Day of Month Number\\\" = Table.AddColumn(#\\\"Insert Day Name Short\\\", \\\"Day of Month Number\\\", each Date.Day([Date]), Int64.Type),\\n    // Day.Monday indicates the week starts on Monday. Change this in case you want the week to start on a different date. \\n    #\\\"Insert Day of Week\\\" = Table.AddColumn(#\\\"Insert Day of Month Number\\\", \\\"Day of Week Number\\\", each Date.DayOfWeek( [Date], Day.Monday ), Int64.Type),\\n    #\\\"Insert Day of Year\\\" = Table.AddColumn(#\\\"Insert Day of Week\\\", \\\"Day of Year Number\\\", each Date.DayOfYear( [Date] ), Int64.Type),\\n    #\\\"Add Day Offset\\\" = Table.AddColumn(#\\\"Insert Day of Year\\\", \\\"Day Offset\\\", each Number.From( Date.From( Today ) - [Date] ) , Int64.Type ),\\n    #\\\"Add Week Offset\\\" = Table.AddColumn(#\\\"Add Day Offset\\\", \\\"Week Offset\\\", each Duration.Days( Date.StartOfWeek( [Date], Day.Monday ) - Date.StartOfWeek( Today, Day.Monday ) ) / 7 , Int64.Type ),\\n    #\\\"Add Month Offset\\\" = Table.AddColumn(#\\\"Add Week Offset\\\", \\\"Month Offset\\\", each ( [Year] - Date.Year( Today ) ) * 12 + ( [Month Of Year] - Date.Month( Today ) ), Int64.Type ),\\n    #\\\"Add Quarter Offset\\\" = Table.AddColumn(#\\\"Add Month Offset\\\", \\\"Quarter Offset\\\", each ( [Year] - Date.Year(Today) ) * 4 + Date.QuarterOfYear( [Date] ) - Date.QuarterOfYear( Today ), Int64.Type ),\\n    #\\\"Add Year Offset\\\" = Table.AddColumn(#\\\"Add Quarter Offset\\\", \\\"Year Offset\\\", each [Year] - Date.Year(Today), Int64.Type ),\\n    #\\\"Insert Is Weekend\\\" = Table.AddColumn(#\\\"Add Year Offset\\\", \\\"Is Weekend\\\", each if Date.DayOfWeek( [Date] ) >= 5 then 1 else 0, Int64.Type ),\\n    #\\\"Insert Is Weekday\\\" = Table.AddColumn(#\\\"Insert Is Weekend\\\", \\\"Is Weekday\\\", each if Date.DayOfWeek( [Date] ) < 5 then 1 else 0, Int64.Type ),\\n    #\\\"Merged Queries\\\" = Table.NestedJoin(#\\\"Insert Is Weekday\\\", {\\\"Start of Month\\\"}, #\\\"Age of Money\\\", {\\\"month\\\"}, \\\"Age of Money\\\", JoinKind.LeftOuter),\\n    #\\\"Expanded Age of Money\\\" = Table.ExpandTableColumn(#\\\"Merged Queries\\\", \\\"Age of Money\\\", {\\\"age_of_money\\\"}, {\\\"age_of_money\\\"})\\nin\\n    #\\\"Expanded Age of Money\\\"\",\"ReferencedQueriesFormulaText\":{}}",
      "loadAsTableDisabled": false,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Custom Categories",
      "lineageTag": "06022964-060c-402e-b08d-916e22d9b491",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WSk4sMVTSAVHpRQUgVkhRYl5xWmpRMZDtlphTnAqkDdBwGlg8Vges3QiuHcTyT0tTcCpNSU8tUQCblJhckpmfR7RhxnDDQKyQjMxiBb/U1JRiBUcF58SS1PT8okrCRsUCAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [id = _t, category_group_id = _t, name = _t, hidden = _t, activity = _t, budgeted = _t, balance = _t, goal_target = _t, deleted = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"id\", type text}, {\"category_group_id\", type text}, {\"name\", type text}, {\"hidden\", type logical}, {\"activity\", Int64.Type}, {\"budgeted\", Int64.Type}, {\"balance\", Int64.Type}, {\"deleted\", type logical}, {\"goal_target\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Custom Category Groups",
      "lineageTag": "00046494-6406-4ed8-b464-e4ee3d833734",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WSk4sSS8qMFTSUQopSswrTkstAjLdEnOKU4F0GpiO1YEpM4IoS87OzEtXcExOzi/NK1EA60tMLsnMzyvGo9cYpDcjs1jBLzU1pVjBUcE5sSQ1Pb+oElNPLAA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [id = _t, name = _t, hidden = _t, deleted = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"id\", type text}, {\"name\", type text}, {\"hidden\", type logical}, {\"deleted\", type logical}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Category Groups",
      "lineageTag": "548884dd-cf1b-407b-a35a-ee6dc8636a9e",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[category_groups],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"name\", \"hidden\", \"deleted\"}, {\"id\", \"name\", \"hidden\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"name\", type text}, {\"hidden\", type logical}, {\"deleted\", type logical}}),",
        "    #\"Appended Query\" = Table.Combine({#\"Changed Type\", #\"Custom Category Groups\"}),",
        "    #\"Added Custom\" = Table.AddColumn(#\"Appended Query\", \"Category Type\", each if [name] = \"Internal Master Category\" then \"Income\" else if [id] = \"catgrp2\" then \"Tracking Account Transactions\" else \"Expense\", type text),",
        "    #\"Added Index\" = Table.AddIndexColumn(#\"Added Custom\", \"Index\", 0, 1, Int64.Type),",
        "    #\"Added Custom1\" = Table.AddColumn(#\"Added Index\", \"Category Group Name Sort\", each if [name] = \"Internal Master Category\" then 0 else if [id] = \"catgrp2\" then 3 else 2 + [Index]/10000, Number.Type),",
        "    #\"Added Custom2\" = Table.AddColumn(#\"Added Custom1\", \"Category Type Sort\", each if [Category Type] = \"Income\" then 0 else if [Category Type] = \"Expense\" then 1 else 2, Int64.Type),",
        "    #\"Removed Columns\" = Table.RemoveColumns(#\"Added Custom2\",{\"Index\"})",
        "in",
        "    #\"Removed Columns\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Payee Locations",
      "lineageTag": "b31248d3-ef23-42e2-85d1-fcc0279c1bb8",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[payee_locations],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"id\", \"payee_id\", \"latitude\", \"longitude\", \"deleted\"}, {\"id\", \"payee_id\", \"latitude\", \"longitude\", \"deleted\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"id\", type text}, {\"payee_id\", type text}, {\"latitude\", type number}, {\"longitude\", type number}, {\"deleted\", type logical}}),",
        "    #\"Kept Duplicates\" = let columnNames = {\"payee_id\"}, addCount = Table.Group(#\"Changed Type\", columnNames, {{\"Count\", Table.RowCount, type number}}), selectDuplicates = Table.SelectRows(addCount, each [Count] > 1), removeCount = Table.RemoveColumns(selectDuplicates, \"Count\") in Table.Join(#\"Changed Type\", columnNames, removeCount, columnNames, JoinKind.Inner)",
        "in",
        "    #\"Kept Duplicates\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Age of Money",
      "lineageTag": "0f56134f-a31c-4014-86c1-28481f28fcd5",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = YnabApi,",
        "    transactions = Source[months],",
        "    #\"Converted to Table\" = Table.FromList(transactions, Splitter.SplitByNothing(), null, null, ExtraValues.Error),",
        "    #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to Table\", \"Column1\", {\"month\", \"age_of_money\"}, {\"month\", \"age_of_money\"}),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(#\"Expanded Column1\",{{\"month\", type date}, {\"age_of_money\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    },
    {
      "name": "Account Types",
      "lineageTag": "a024967e-56be-4e11-966e-b9b6e4c3f8fd",
      "queryGroupId": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "navigationStepName": "Navigation",
      "text": [
        "let",
        "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"bZG7jsIwEEV/xXJNgXktlCu2BAWJMqIYkiGxyNrINkj8/frFJFmliHLv5Bw7lsuSVy1Wd6kaPuP7Pn5bi876sPCP4JdZyS28/LcwO1MibElYBbYNa6UXAaIHDNbS7cHUAYuF5XaQcJWddBKDso7bB6WTCotbYiOmkBU3NhgMvQ15v9q4Bhr0g2Mfx7RYEg5Ppw8aVPhvH1nOY35HuHXPGpXL1Dm1aUnMyXqgsVpBl7lTrtPeV38Uf9QKuh+8hgMfU2O5jqUtSdq1aDJThDwtiMXYiJdGyqfRVa7oKiP9WetNxnDybyeRdrr8AQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [account_type_id = _t, #\"Account Type\" = _t, #\"Account Group\" = _t, #\"Account Type Sort\" = _t, #\"Account Group Sort\" = _t]),",
        "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"account_type_id\", type text}, {\"Account Type\", type text}, {\"Account Group\", type text}, {\"Account Type Sort\", Int64.Type}, {\"Account Group Sort\", Int64.Type}})",
        "in",
        "    #\"Changed Type\""
      ],
      "loadAsTableDisabled": true,
      "resultType": "Table",
      "isHidden": false
    }
  ],
  "queryGroups": [
    {
      "name": "Transaction Processing",
      "id": "2f2a5c66-60b6-4f74-a401-536832a54695",
      "description": "The transactions table provided by the API only shows the total and header information for split transactions. The split transactions are contained in the Subtransactions table from the API. This group handles the processing to integrate split transactions into the main transaction table."
    },
    {
      "name": "Parameters",
      "id": "c0abc752-9b78-4a7c-a13d-f461180dceba",
      "order": 1,
      "description": ""
    },
    {
      "name": "Custom Categories",
      "id": "662324ea-8b3d-4b7f-984b-acc820c97ac4",
      "order": 2,
      "description": "These data tables are used for categorizing off budget transactions and transfers. Since YNAB does not assign a category, we need to create one to better maintain referential integrity"
    }
  ],
  "culture": "en-US"
}